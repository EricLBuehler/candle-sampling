var searchIndex = JSON.parse('{\
"candle_sampling":{"doc":"Sampling utilities for Candle.","t":"ADDNENDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["logits_processor","LogitsProcessor","Logprobs","Multinomial","SamplingMethod","TopK","TopLogprob","TopP","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","new","sample","serialize","serialize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip"],"q":[[0,"candle_sampling"],[1,"candle_sampling::logits_processor"],[74,"core::result"],[75,"serde::de"],[76,"core::fmt"],[77,"core::fmt"],[78,"tokenizers::tokenizer"],[79,"candle_core::tensor"],[80,"candle_core::error"],[81,"serde::ser"],[82,"core::any"]],"d":["","LogitsProcessor for sampling.","","","Sampling method for <code>LogitsProcessor</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Sample the provided tokens.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,0,1,0,1,14,1,2,3,14,1,2,3,1,2,3,1,2,3,14,1,2,3,14,1,2,3,2,3,14,1,2,3,1,2,3,14,1,2,3,14,1,2,3,14,1,2,3,14,14,2,3,1,2,3,14,1,2,3,14,1,2,3,14,1,2,3,14,1,2,3],"f":[0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[2]]],7],[-1,[[6,[3]]],7],[5,4],[5,4],[5,4],[5,4],[[1,8],9],[[2,8],9],[[3,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[10,[12,[11]],1,5,13],14],[[14,15],[[16,[3]]]],[[2,-1],6,17],[[3,-1],6,17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[4,"SamplingMethod",1],[3,"TopLogprob",1],[3,"Logprobs",1],[15,"tuple"],[15,"usize"],[4,"Result",74],[8,"Deserializer",75],[3,"Formatter",76],[6,"Result",76],[15,"u64"],[15,"f64"],[4,"Option",77],[3,"Tokenizer",78],[3,"LogitsProcessor",1],[3,"Tensor",79],[6,"Result",80],[8,"Serializer",81],[3,"TypeId",82]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
