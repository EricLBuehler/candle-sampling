var searchIndex = JSON.parse('{\
"candle_sampling":{"doc":"Sampling utilities for Candle.","t":"ADNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["logits_processor","LogitsProcessor","Multinomial","SamplingMethod","TopK","TopP","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","init","init","into","into","new","sample","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"candle_sampling"],[1,"candle_sampling::logits_processor"]],"d":["","LogitsProcessor for sampling.","","Sampling method for <code>LogitsProcessor</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Sample the provided tokens.","","","","","","","","",""],"i":[0,0,1,0,1,1,8,1,8,1,1,1,8,1,8,1,8,1,1,8,1,8,1,8,1,8,8,1,8,1,8,1,8,1,8,1],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[[]],[2],[2],[2],[2],[2],[2],[[1,3],4],[[]],[[]],[[],2],[[],2],[[]],[[]],[[5,[7,[6]],1],8],[[8,9],[[11,[10]]]],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[]],[[]]],"c":[],"p":[[4,"SamplingMethod"],[15,"usize"],[3,"Formatter"],[6,"Result"],[15,"u64"],[15,"f64"],[4,"Option"],[3,"LogitsProcessor"],[3,"Tensor"],[15,"u32"],[6,"Result"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
