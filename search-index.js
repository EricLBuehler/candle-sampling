var searchIndex = new Map(JSON.parse('[\
["candle_sampling",{"doc":"Sampling utilities for Candle.","t":"CFFPGPFPNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNOOONNNNNNNNNNNNNNNN","n":["logits_processor","LogitsProcessor","Logprobs","Multinomial","SamplingMethod","TopK","TopLogprob","TopP","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","logprob","logprob","new","sample","serialize","serialize","to_owned","to_owned","to_owned","token","token","top_logprobs","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip"],"q":[[0,"candle_sampling"],[1,"candle_sampling::logits_processor"],[81,"core::result"],[82,"serde::de"],[83,"core::fmt"],[84,"core::fmt"],[85,"tokenizers::tokenizer"],[86,"candle_core::tensor"],[87,"candle_core::error"],[88,"serde::ser"],[89,"core::any"]],"d":["","LogitsProcessor for sampling.","","","Sampling method for <code>LogitsProcessor</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Sample the provided tokens.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,0,1,0,1,15,1,2,3,15,1,2,3,2,3,1,2,3,1,2,3,15,1,2,3,15,1,2,3,2,3,15,1,2,3,1,2,3,15,1,2,3,15,1,2,3,15,1,2,3,2,3,15,15,2,3,1,2,3,2,3,3,15,1,2,3,15,1,2,3,15,1,2,3,15,1,2,3],"f":[0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[1,1],[2,2],[3,3],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[2]]],7],[-1,[[6,[3]]],7],[5,4],[5,4],[5,4],[5,4],[[1,8],9],[[2,8],9],[[3,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[10,[12,[11]],1,5,13,[12,[14]],[12,[14]]],15],[[15,16,[12,[[18,[17]]]]],[[19,[3]]]],[[2,-1],6,20],[[3,-1],6,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[6,"SamplingMethod",1],[5,"TopLogprob",1],[5,"Logprobs",1],[1,"tuple"],[1,"usize"],[6,"Result",81],[10,"Deserializer",82],[5,"Formatter",83],[8,"Result",83],[1,"u64"],[1,"f64"],[6,"Option",84],[5,"Tokenizer",85],[1,"f32"],[5,"LogitsProcessor",1],[5,"Tensor",86],[1,"u32"],[1,"slice"],[8,"Result",87],[10,"Serializer",88],[5,"TypeId",89]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
