var searchIndex = new Map(JSON.parse('[\
["candle_sampling",{"doc":"Sampling utilities for Candle.","t":"CFFPGPPFPNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNOOONNNNNNNNNNNNNNNN","n":["logits_processor","LogitsProcessor","Logprobs","Multinomial","SamplingMethod","TopK","TopKP","TopLogprob","TopP","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","logprob","logprob","new","sample","to_owned","to_owned","to_owned","token","token","top_logprobs","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip"],"q":[[0,"candle_sampling"],[1,"candle_sampling::logits_processor"],[78,"core::fmt"],[79,"core::fmt"],[80,"tokenizers::tokenizer"],[81,"std::collections::hash::map"],[82,"candle_core::tensor"],[83,"candle_core::error"],[84,"core::result"],[85,"core::any"]],"d":["","LogitsProcessor for sampling.","","","Sampling method for <code>LogitsProcessor</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,0,1,1,0,1,15,1,2,3,15,1,2,3,2,3,1,2,3,1,2,3,15,1,2,3,15,1,2,3,15,1,2,3,1,2,3,15,1,2,3,15,1,2,3,15,1,2,3,2,3,15,15,1,2,3,2,3,3,15,1,2,3,15,1,2,3,15,1,2,3,15,1,2,3],"f":"`````````{ce{}{}}0000000``{bb}{dd}{ff}{{ce}h{}{}}00{jc{}}0000000{jh}000{{bl}n}{{dl}n}{{fl}n}{cc{}}000{{}j}000;;;;``{{A`{Ad{Ab}}bjAf{Ad{Ah}}{Ad{Ah}}{Ad{{Al{AjAh}}}}}An}{{AnB`{Ad{B`}}}{{Bb{f}}}}===```{c{{Bd{e}}}{}{}}0000000{cBf{}}000????","c":[],"p":[[6,"SamplingMethod",1],[5,"TopLogprob",1],[5,"Logprobs",1],[1,"unit"],[1,"usize"],[5,"Formatter",78],[8,"Result",78],[1,"u64"],[1,"f64"],[6,"Option",79],[5,"Tokenizer",80],[1,"f32"],[1,"u32"],[5,"HashMap",81],[5,"LogitsProcessor",1],[5,"Tensor",82],[8,"Result",83],[6,"Result",84],[5,"TypeId",85]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
